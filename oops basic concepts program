ðŸ˜ŽWAP to understand class,objects and functions

//#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class cars{
    public:
    int carNum;
    string carName;
    void printCar(){
        cout<<"car number="<<carNum<<endl;
        cout<<"car name="<<carName;
    }
};
int main()
{
  cars c1;
  c1.carNum=1234;
  c1.carName="volvo";
  c1.printCar();
    return 0;
}



ðŸ˜ŽWAP to understand constructor, default constructor

#include <bits/stdc++.h>
using namespace std;
class Cars{
    public:
    int carNum;
    string carName;
    void printCar(){
        cout<<"car number="<<carNum<<endl;
        cout<<"car name="<<carName;
    }
    Cars(int CarNumber,string CarName){   //constructor
        carNum=CarNumber;
        carName=CarName;
    }
};
int main()
{
  Cars c1=Cars(1234,"volvo");
  Cars c2=Cars(5678,"maruti");
//   c1.carNum=1234;
//   c1.carName="volvo";
   c1.printCar();
   c2.printCar();
  
    return 0;
}

ðŸ˜ŽWAP to understand ENCAPSULATION

#include <bits/stdc++.h>
using namespace std;
class Car{
    //encapsulation
    private:
    int CarNum;
    string CarName;
    public:
     void setNum(int Number)
     {
        CarNum=Number;
     }
    int getNum()
    {
        return CarNum;
    }
    void setName(string Name)
    {
        CarName=Name;
    }
    string getName()
    {
        return CarName;
    }
    // void Carinfo()
    // {
    //     cout<<"CarNumber is"<<CarNum<<endl;
    // }
    
    //constructor
    Car(int Number)
    {
        CarNum=Number;
    }
};
int main()
{
 Car C1=Car(1234);
//  C1.Carinfo();
  C1.setNum(23);
  cout<<C1.getNum();
  C1.setName("Priyanshi");
  cout<<C1.getName();
  
 
    return 0;
}

ðŸ˜ŽWAP to understand Abstraction

#include <bits/stdc++.h>
using namespace std;
//abstract class
class Abstractcar{
   virtual void loanApprove()=0;
};
//agreement
class Car: Abstractcar{
    //encapsulation
    private:
    int CarNum;
    string CarName;
    public:
     void setNum(int Number)
     {
        CarNum=Number;
     }
    int getNum()
    {
        return CarNum;
    }
    void setName(string Name)
    {
        CarName=Name;
    }
    string getName()
    {
        return CarName;
    }
    // void Carinfo()
    // {
    //     cout<<"CarNumber is"<<CarNum<<endl;
    // }
    
    //constructor
    Car(int Number)
    {
        CarNum=Number;
    }
    void loanApprove()
    {
        if(CarNum>20)
        {
            cout<<"approved"<<endl;
        }
        else
        {
            cout<<"not approved"<<endl;
        }
    }
};
int main()
{
 Car C1=Car(1234);
//  C1.Carinfo();
  C1.setNum(2);
  cout<<C1.getNum();
  C1.setName("Priyanshi\n");
  cout<<C1.getName();
  C1.loanApprove();
 
    return 0;
}



ðŸ˜ŽWAP to understand Inheritance

#include <bits/stdc++.h>
using namespace std;
class Car{
   private:
    int CarNum;
    string CarName;
    public:
    void setNum(int Number)
    {
        CarNum=Number;
    }
    int getNum()
    {
        return CarNum;
    }
    void setName(string Name)
    {
        CarName=Name;
    }
    string getName()
    {
        return CarName;
    }
    void Carinfo()
    {
        cout<<"CarNumber is"<<CarNum<<endl;
        cout<<"CarName is"<<CarName<<endl;
        
    }
    //constructor
    Car(int Number,string Name)
    {
        CarNum=Number;
        CarName=Name;
    }
};
class Type:public Car{
public:
string typeName;
//constructor
Type(string tName,int Number,string Name):Car(Number,Name)//inheritance and inherit constructor
{
    typeName=tName;
}
  void setType(string tName)
    {
        typeName=tName;
    }
    string getType()
    {
        return typeName;
    }

};
int main()
{
 //Car C1=Car(123,"Yogesh");
 Type T=Type("",1234,"Volvo");
 T.Carinfo();
 T.setType("SUV");
 cout<<T.getType();
 return 0;
}




